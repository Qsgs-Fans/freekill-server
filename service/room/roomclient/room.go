// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: room.proto

package roomclient

import (
	"context"

	"github.com/Qsgs-Fans/freekill-server/service/room/room"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateRoomReply   = room.CreateRoomReply
	CreateRoomRequest = room.CreateRoomRequest
	JoinRoomRequest   = room.JoinRoomRequest
	LeaveRoomRequest  = room.LeaveRoomRequest
	RoomEmptyReply    = room.RoomEmptyReply

	Room interface {
		CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomReply, error)
		// 房间应当有自动过期机制
		JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*RoomEmptyReply, error)
		LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*RoomEmptyReply, error)
	}

	defaultRoom struct {
		cli zrpc.Client
	}
)

func NewRoom(cli zrpc.Client) Room {
	return &defaultRoom{
		cli: cli,
	}
}

func (m *defaultRoom) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomReply, error) {
	client := room.NewRoomClient(m.cli.Conn())
	return client.CreateRoom(ctx, in, opts...)
}

// 房间应当有自动过期机制
func (m *defaultRoom) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*RoomEmptyReply, error) {
	client := room.NewRoomClient(m.cli.Conn())
	return client.JoinRoom(ctx, in, opts...)
}

func (m *defaultRoom) LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*RoomEmptyReply, error) {
	client := room.NewRoomClient(m.cli.Conn())
	return client.LeaveRoom(ctx, in, opts...)
}
