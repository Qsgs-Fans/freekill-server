// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bannedDevicesFieldNames          = builder.RawFieldNames(&BannedDevices{})
	bannedDevicesRows                = strings.Join(bannedDevicesFieldNames, ",")
	bannedDevicesRowsExpectAutoSet   = strings.Join(stringx.Remove(bannedDevicesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bannedDevicesRowsWithPlaceHolder = strings.Join(stringx.Remove(bannedDevicesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBannedDevicesIdPrefix         = "cache:bannedDevices:id:"
	cacheBannedDevicesDeviceUuidPrefix = "cache:bannedDevices:deviceUuid:"
)

type (
	bannedDevicesModel interface {
		Insert(ctx context.Context, data *BannedDevices) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BannedDevices, error)
		FindOneByDeviceUuid(ctx context.Context, deviceUuid string) (*BannedDevices, error)
		Update(ctx context.Context, data *BannedDevices) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBannedDevicesModel struct {
		sqlc.CachedConn
		table string
	}

	BannedDevices struct {
		Id         int64          `db:"id"`
		DeviceUuid string         `db:"device_uuid"`
		BanReason  sql.NullString `db:"ban_reason"`
		CreatedAt  time.Time      `db:"created_at"`
		ExpiresAt  sql.NullTime   `db:"expires_at"` // 封禁过期时间，NULL表示永久
	}
)

func newBannedDevicesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultBannedDevicesModel {
	return &defaultBannedDevicesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`banned_devices`",
	}
}

func (m *defaultBannedDevicesModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	bannedDevicesDeviceUuidKey := fmt.Sprintf("%s%v", cacheBannedDevicesDeviceUuidPrefix, data.DeviceUuid)
	bannedDevicesIdKey := fmt.Sprintf("%s%v", cacheBannedDevicesIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bannedDevicesDeviceUuidKey, bannedDevicesIdKey)
	return err
}

func (m *defaultBannedDevicesModel) FindOne(ctx context.Context, id int64) (*BannedDevices, error) {
	bannedDevicesIdKey := fmt.Sprintf("%s%v", cacheBannedDevicesIdPrefix, id)
	var resp BannedDevices
	err := m.QueryRowCtx(ctx, &resp, bannedDevicesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bannedDevicesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBannedDevicesModel) FindOneByDeviceUuid(ctx context.Context, deviceUuid string) (*BannedDevices, error) {
	bannedDevicesDeviceUuidKey := fmt.Sprintf("%s%v", cacheBannedDevicesDeviceUuidPrefix, deviceUuid)
	var resp BannedDevices
	err := m.QueryRowIndexCtx(ctx, &resp, bannedDevicesDeviceUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `device_uuid` = ? limit 1", bannedDevicesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, deviceUuid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBannedDevicesModel) Insert(ctx context.Context, data *BannedDevices) (sql.Result, error) {
	bannedDevicesDeviceUuidKey := fmt.Sprintf("%s%v", cacheBannedDevicesDeviceUuidPrefix, data.DeviceUuid)
	bannedDevicesIdKey := fmt.Sprintf("%s%v", cacheBannedDevicesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, bannedDevicesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeviceUuid, data.BanReason, data.ExpiresAt)
	}, bannedDevicesDeviceUuidKey, bannedDevicesIdKey)
	return ret, err
}

func (m *defaultBannedDevicesModel) Update(ctx context.Context, newData *BannedDevices) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	bannedDevicesDeviceUuidKey := fmt.Sprintf("%s%v", cacheBannedDevicesDeviceUuidPrefix, data.DeviceUuid)
	bannedDevicesIdKey := fmt.Sprintf("%s%v", cacheBannedDevicesIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bannedDevicesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DeviceUuid, newData.BanReason, newData.ExpiresAt, newData.Id)
	}, bannedDevicesDeviceUuidKey, bannedDevicesIdKey)
	return err
}

func (m *defaultBannedDevicesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBannedDevicesIdPrefix, primary)
}

func (m *defaultBannedDevicesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bannedDevicesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBannedDevicesModel) tableName() string {
	return m.table
}
