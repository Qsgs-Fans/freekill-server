// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: router.proto

package routerclient

import (
	"context"

	"github.com/Qsgs-Fans/freekill-server/service/router/router"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Packet        = router.Packet
	RequestPacket = router.RequestPacket
	RouterEmpty   = router.RouterEmpty

	Router interface {
		NotifyClient(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*RouterEmpty, error)
		RequestClient(ctx context.Context, in *RequestPacket, opts ...grpc.CallOption) (*RouterEmpty, error)
	}

	defaultRouter struct {
		cli zrpc.Client
	}
)

func NewRouter(cli zrpc.Client) Router {
	return &defaultRouter{
		cli: cli,
	}
}

func (m *defaultRouter) NotifyClient(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*RouterEmpty, error) {
	client := router.NewRouterClient(m.cli.Conn())
	return client.NotifyClient(ctx, in, opts...)
}

func (m *defaultRouter) RequestClient(ctx context.Context, in *RequestPacket, opts ...grpc.CallOption) (*RouterEmpty, error) {
	client := router.NewRouterClient(m.cli.Conn())
	return client.RequestClient(ctx, in, opts...)
}
