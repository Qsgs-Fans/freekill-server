// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usernameBlacklistFieldNames          = builder.RawFieldNames(&UsernameBlacklist{})
	usernameBlacklistRows                = strings.Join(usernameBlacklistFieldNames, ",")
	usernameBlacklistRowsExpectAutoSet   = strings.Join(stringx.Remove(usernameBlacklistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	usernameBlacklistRowsWithPlaceHolder = strings.Join(stringx.Remove(usernameBlacklistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUsernameBlacklistIdPrefix       = "cache:usernameBlacklist:id:"
	cacheUsernameBlacklistUsernamePrefix = "cache:usernameBlacklist:username:"
)

type (
	usernameBlacklistModel interface {
		Insert(ctx context.Context, data *UsernameBlacklist) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UsernameBlacklist, error)
		FindOneByUsername(ctx context.Context, username string) (*UsernameBlacklist, error)
		Update(ctx context.Context, data *UsernameBlacklist) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUsernameBlacklistModel struct {
		sqlc.CachedConn
		table string
	}

	UsernameBlacklist struct {
		Id        int64          `db:"id"`
		Username  string         `db:"username"`
		BanReason sql.NullString `db:"ban_reason"`
		CreatedAt time.Time      `db:"created_at"`
		ExpiresAt sql.NullTime   `db:"expires_at"` // 封禁过期时间，NULL表示永久
	}
)

func newUsernameBlacklistModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUsernameBlacklistModel {
	return &defaultUsernameBlacklistModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`username_blacklist`",
	}
}

func (m *defaultUsernameBlacklistModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	usernameBlacklistIdKey := fmt.Sprintf("%s%v", cacheUsernameBlacklistIdPrefix, id)
	usernameBlacklistUsernameKey := fmt.Sprintf("%s%v", cacheUsernameBlacklistUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, usernameBlacklistIdKey, usernameBlacklistUsernameKey)
	return err
}

func (m *defaultUsernameBlacklistModel) FindOne(ctx context.Context, id int64) (*UsernameBlacklist, error) {
	usernameBlacklistIdKey := fmt.Sprintf("%s%v", cacheUsernameBlacklistIdPrefix, id)
	var resp UsernameBlacklist
	err := m.QueryRowCtx(ctx, &resp, usernameBlacklistIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usernameBlacklistRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsernameBlacklistModel) FindOneByUsername(ctx context.Context, username string) (*UsernameBlacklist, error) {
	usernameBlacklistUsernameKey := fmt.Sprintf("%s%v", cacheUsernameBlacklistUsernamePrefix, username)
	var resp UsernameBlacklist
	err := m.QueryRowIndexCtx(ctx, &resp, usernameBlacklistUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", usernameBlacklistRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsernameBlacklistModel) Insert(ctx context.Context, data *UsernameBlacklist) (sql.Result, error) {
	usernameBlacklistIdKey := fmt.Sprintf("%s%v", cacheUsernameBlacklistIdPrefix, data.Id)
	usernameBlacklistUsernameKey := fmt.Sprintf("%s%v", cacheUsernameBlacklistUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, usernameBlacklistRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.BanReason, data.ExpiresAt)
	}, usernameBlacklistIdKey, usernameBlacklistUsernameKey)
	return ret, err
}

func (m *defaultUsernameBlacklistModel) Update(ctx context.Context, newData *UsernameBlacklist) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	usernameBlacklistIdKey := fmt.Sprintf("%s%v", cacheUsernameBlacklistIdPrefix, data.Id)
	usernameBlacklistUsernameKey := fmt.Sprintf("%s%v", cacheUsernameBlacklistUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, usernameBlacklistRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.BanReason, newData.ExpiresAt, newData.Id)
	}, usernameBlacklistIdKey, usernameBlacklistUsernameKey)
	return err
}

func (m *defaultUsernameBlacklistModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUsernameBlacklistIdPrefix, primary)
}

func (m *defaultUsernameBlacklistModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usernameBlacklistRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUsernameBlacklistModel) tableName() string {
	return m.table
}
