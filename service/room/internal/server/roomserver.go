// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: room.proto

package server

import (
	"context"

	"github.com/Qsgs-Fans/freekill-server/service/room/internal/logic"
	"github.com/Qsgs-Fans/freekill-server/service/room/internal/svc"
	"github.com/Qsgs-Fans/freekill-server/service/room/room"
)

type RoomServer struct {
	svcCtx *svc.ServiceContext
	room.UnimplementedRoomServer
}

func NewRoomServer(svcCtx *svc.ServiceContext) *RoomServer {
	return &RoomServer{
		svcCtx: svcCtx,
	}
}

func (s *RoomServer) CreateRoom(ctx context.Context, in *room.CreateRoomRequest) (*room.CreateRoomReply, error) {
	l := logic.NewCreateRoomLogic(ctx, s.svcCtx)
	return l.CreateRoom(in)
}

func (s *RoomServer) EnterRoom(ctx context.Context, in *room.UidAndRidRequest) (*room.RoomEmptyReply, error) {
	l := logic.NewEnterRoomLogic(ctx, s.svcCtx)
	return l.EnterRoom(in)
}

func (s *RoomServer) ObserveRoom(ctx context.Context, in *room.UidAndRidRequest) (*room.RoomEmptyReply, error) {
	l := logic.NewObserveRoomLogic(ctx, s.svcCtx)
	return l.ObserveRoom(in)
}

func (s *RoomServer) QuitRoom(ctx context.Context, in *room.UidRequest) (*room.RoomEmptyReply, error) {
	l := logic.NewQuitRoomLogic(ctx, s.svcCtx)
	return l.QuitRoom(in)
}

// TODO list
func (s *RoomServer) AddRobot(ctx context.Context, in *room.UidRequest) (*room.RoomEmptyReply, error) {
	l := logic.NewAddRobotLogic(ctx, s.svcCtx)
	return l.AddRobot(in)
}

// rpc KickPlayer
func (s *RoomServer) StartGame(ctx context.Context, in *room.UidRequest) (*room.RoomEmptyReply, error) {
	l := logic.NewStartGameLogic(ctx, s.svcCtx)
	return l.StartGame(in)
}
