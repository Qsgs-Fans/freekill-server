// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bannedIpsFieldNames          = builder.RawFieldNames(&BannedIps{})
	bannedIpsRows                = strings.Join(bannedIpsFieldNames, ",")
	bannedIpsRowsExpectAutoSet   = strings.Join(stringx.Remove(bannedIpsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bannedIpsRowsWithPlaceHolder = strings.Join(stringx.Remove(bannedIpsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBannedIpsIdPrefix        = "cache:bannedIps:id:"
	cacheBannedIpsIpAddressPrefix = "cache:bannedIps:ipAddress:"
)

type (
	bannedIpsModel interface {
		Insert(ctx context.Context, data *BannedIps) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BannedIps, error)
		FindOneByIpAddress(ctx context.Context, ipAddress string) (*BannedIps, error)
		Update(ctx context.Context, data *BannedIps) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBannedIpsModel struct {
		sqlc.CachedConn
		table string
	}

	BannedIps struct {
		Id        int64          `db:"id"`
		IpAddress string         `db:"ip_address"` // 4字节IPv4或16字节IPv6
		BanReason sql.NullString `db:"ban_reason"`
		CreatedAt time.Time      `db:"created_at"`
		ExpiresAt sql.NullTime   `db:"expires_at"` // 封禁过期时间，NULL表示永久
	}
)

func newBannedIpsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultBannedIpsModel {
	return &defaultBannedIpsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`banned_ips`",
	}
}

func (m *defaultBannedIpsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	bannedIpsIdKey := fmt.Sprintf("%s%v", cacheBannedIpsIdPrefix, id)
	bannedIpsIpAddressKey := fmt.Sprintf("%s%v", cacheBannedIpsIpAddressPrefix, data.IpAddress)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bannedIpsIdKey, bannedIpsIpAddressKey)
	return err
}

func (m *defaultBannedIpsModel) FindOne(ctx context.Context, id int64) (*BannedIps, error) {
	bannedIpsIdKey := fmt.Sprintf("%s%v", cacheBannedIpsIdPrefix, id)
	var resp BannedIps
	err := m.QueryRowCtx(ctx, &resp, bannedIpsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bannedIpsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBannedIpsModel) FindOneByIpAddress(ctx context.Context, ipAddress string) (*BannedIps, error) {
	bannedIpsIpAddressKey := fmt.Sprintf("%s%v", cacheBannedIpsIpAddressPrefix, ipAddress)
	var resp BannedIps
	err := m.QueryRowIndexCtx(ctx, &resp, bannedIpsIpAddressKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `ip_address` = ? limit 1", bannedIpsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, ipAddress); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBannedIpsModel) Insert(ctx context.Context, data *BannedIps) (sql.Result, error) {
	bannedIpsIdKey := fmt.Sprintf("%s%v", cacheBannedIpsIdPrefix, data.Id)
	bannedIpsIpAddressKey := fmt.Sprintf("%s%v", cacheBannedIpsIpAddressPrefix, data.IpAddress)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, bannedIpsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.IpAddress, data.BanReason, data.ExpiresAt)
	}, bannedIpsIdKey, bannedIpsIpAddressKey)
	return ret, err
}

func (m *defaultBannedIpsModel) Update(ctx context.Context, newData *BannedIps) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	bannedIpsIdKey := fmt.Sprintf("%s%v", cacheBannedIpsIdPrefix, data.Id)
	bannedIpsIpAddressKey := fmt.Sprintf("%s%v", cacheBannedIpsIpAddressPrefix, data.IpAddress)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bannedIpsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.IpAddress, newData.BanReason, newData.ExpiresAt, newData.Id)
	}, bannedIpsIdKey, bannedIpsIpAddressKey)
	return err
}

func (m *defaultBannedIpsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBannedIpsIdPrefix, primary)
}

func (m *defaultBannedIpsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bannedIpsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBannedIpsModel) tableName() string {
	return m.table
}
