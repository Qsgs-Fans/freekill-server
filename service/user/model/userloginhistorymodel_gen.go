// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLoginHistoryFieldNames          = builder.RawFieldNames(&UserLoginHistory{})
	userLoginHistoryRows                = strings.Join(userLoginHistoryFieldNames, ",")
	userLoginHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(userLoginHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userLoginHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(userLoginHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserLoginHistoryIdPrefix = "cache:userLoginHistory:id:"
)

type (
	userLoginHistoryModel interface {
		Insert(ctx context.Context, data *UserLoginHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserLoginHistory, error)
		Update(ctx context.Context, data *UserLoginHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserLoginHistoryModel struct {
		sqlc.CachedConn
		table string
	}

	UserLoginHistory struct {
		Id           int64     `db:"id"`
		UserId       int64     `db:"user_id"`
		IpAddress    string    `db:"ip_address"` // 4字节IPv4或16字节IPv6
		DeviceUuid   string    `db:"device_uuid"`
		LoginTime    time.Time `db:"login_time"`
		LoginSuccess bool      `db:"login_success"`
	}
)

func newUserLoginHistoryModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserLoginHistoryModel {
	return &defaultUserLoginHistoryModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_login_history`",
	}
}

func (m *defaultUserLoginHistoryModel) Delete(ctx context.Context, id int64) error {
	userLoginHistoryIdKey := fmt.Sprintf("%s%v", cacheUserLoginHistoryIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userLoginHistoryIdKey)
	return err
}

func (m *defaultUserLoginHistoryModel) FindOne(ctx context.Context, id int64) (*UserLoginHistory, error) {
	userLoginHistoryIdKey := fmt.Sprintf("%s%v", cacheUserLoginHistoryIdPrefix, id)
	var resp UserLoginHistory
	err := m.QueryRowCtx(ctx, &resp, userLoginHistoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLoginHistoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLoginHistoryModel) Insert(ctx context.Context, data *UserLoginHistory) (sql.Result, error) {
	userLoginHistoryIdKey := fmt.Sprintf("%s%v", cacheUserLoginHistoryIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userLoginHistoryRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.IpAddress, data.DeviceUuid, data.LoginTime, data.LoginSuccess)
	}, userLoginHistoryIdKey)
	return ret, err
}

func (m *defaultUserLoginHistoryModel) Update(ctx context.Context, data *UserLoginHistory) error {
	userLoginHistoryIdKey := fmt.Sprintf("%s%v", cacheUserLoginHistoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userLoginHistoryRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.IpAddress, data.DeviceUuid, data.LoginTime, data.LoginSuccess, data.Id)
	}, userLoginHistoryIdKey)
	return err
}

func (m *defaultUserLoginHistoryModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserLoginHistoryIdPrefix, primary)
}

func (m *defaultUserLoginHistoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLoginHistoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserLoginHistoryModel) tableName() string {
	return m.table
}
