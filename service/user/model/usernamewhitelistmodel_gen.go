// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usernameWhitelistFieldNames          = builder.RawFieldNames(&UsernameWhitelist{})
	usernameWhitelistRows                = strings.Join(usernameWhitelistFieldNames, ",")
	usernameWhitelistRowsExpectAutoSet   = strings.Join(stringx.Remove(usernameWhitelistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	usernameWhitelistRowsWithPlaceHolder = strings.Join(stringx.Remove(usernameWhitelistFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUsernameWhitelistIdPrefix       = "cache:usernameWhitelist:id:"
	cacheUsernameWhitelistUsernamePrefix = "cache:usernameWhitelist:username:"
)

type (
	usernameWhitelistModel interface {
		Insert(ctx context.Context, data *UsernameWhitelist) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UsernameWhitelist, error)
		FindOneByUsername(ctx context.Context, username string) (*UsernameWhitelist, error)
		Update(ctx context.Context, data *UsernameWhitelist) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUsernameWhitelistModel struct {
		sqlc.CachedConn
		table string
	}

	UsernameWhitelist struct {
		Id        int64     `db:"id"`
		Username  string    `db:"username"`
		CreatedAt time.Time `db:"created_at"`
	}
)

func newUsernameWhitelistModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUsernameWhitelistModel {
	return &defaultUsernameWhitelistModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`username_whitelist`",
	}
}

func (m *defaultUsernameWhitelistModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	usernameWhitelistIdKey := fmt.Sprintf("%s%v", cacheUsernameWhitelistIdPrefix, id)
	usernameWhitelistUsernameKey := fmt.Sprintf("%s%v", cacheUsernameWhitelistUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, usernameWhitelistIdKey, usernameWhitelistUsernameKey)
	return err
}

func (m *defaultUsernameWhitelistModel) FindOne(ctx context.Context, id int64) (*UsernameWhitelist, error) {
	usernameWhitelistIdKey := fmt.Sprintf("%s%v", cacheUsernameWhitelistIdPrefix, id)
	var resp UsernameWhitelist
	err := m.QueryRowCtx(ctx, &resp, usernameWhitelistIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usernameWhitelistRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsernameWhitelistModel) FindOneByUsername(ctx context.Context, username string) (*UsernameWhitelist, error) {
	usernameWhitelistUsernameKey := fmt.Sprintf("%s%v", cacheUsernameWhitelistUsernamePrefix, username)
	var resp UsernameWhitelist
	err := m.QueryRowIndexCtx(ctx, &resp, usernameWhitelistUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", usernameWhitelistRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsernameWhitelistModel) Insert(ctx context.Context, data *UsernameWhitelist) (sql.Result, error) {
	usernameWhitelistIdKey := fmt.Sprintf("%s%v", cacheUsernameWhitelistIdPrefix, data.Id)
	usernameWhitelistUsernameKey := fmt.Sprintf("%s%v", cacheUsernameWhitelistUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, usernameWhitelistRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username)
	}, usernameWhitelistIdKey, usernameWhitelistUsernameKey)
	return ret, err
}

func (m *defaultUsernameWhitelistModel) Update(ctx context.Context, newData *UsernameWhitelist) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	usernameWhitelistIdKey := fmt.Sprintf("%s%v", cacheUsernameWhitelistIdPrefix, data.Id)
	usernameWhitelistUsernameKey := fmt.Sprintf("%s%v", cacheUsernameWhitelistUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, usernameWhitelistRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Id)
	}, usernameWhitelistIdKey, usernameWhitelistUsernameKey)
	return err
}

func (m *defaultUsernameWhitelistModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUsernameWhitelistIdPrefix, primary)
}

func (m *defaultUsernameWhitelistModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usernameWhitelistRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUsernameWhitelistModel) tableName() string {
	return m.table
}
